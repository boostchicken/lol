// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/boostchicken/lol/model"
)

func newLolEntry(db *gorm.DB, opts ...gen.DOOption) lolEntry {
	_lolEntry := lolEntry{}

	_lolEntry.lolEntryDo.UseDB(db, opts...)
	_lolEntry.lolEntryDo.UseModel(&model.LolEntry{})

	tableName := _lolEntry.lolEntryDo.TableName()
	_lolEntry.ALL = field.NewAsterisk(tableName)
	_lolEntry.ConfigId = field.NewUint64(tableName, "config_id")
	_lolEntry.Command = field.NewString(tableName, "command")
	_lolEntry.Type = field.NewInt32(tableName, "type")
	_lolEntry.Url = field.NewString(tableName, "url")

	_lolEntry.fillFieldMap()

	return _lolEntry
}

type lolEntry struct {
	lolEntryDo

	ALL      field.Asterisk
	ConfigId field.Uint64
	Command  field.String
	Type     field.Int32
	Url      field.String

	fieldMap map[string]field.Expr
}

func (l lolEntry) Table(newTableName string) *lolEntry {
	l.lolEntryDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lolEntry) As(alias string) *lolEntry {
	l.lolEntryDo.DO = *(l.lolEntryDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lolEntry) updateTableName(table string) *lolEntry {
	l.ALL = field.NewAsterisk(table)
	l.ConfigId = field.NewUint64(table, "config_id")
	l.Command = field.NewString(table, "command")
	l.Type = field.NewInt32(table, "type")
	l.Url = field.NewString(table, "url")

	l.fillFieldMap()

	return l
}

func (l *lolEntry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lolEntry) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 4)
	l.fieldMap["config_id"] = l.ConfigId
	l.fieldMap["command"] = l.Command
	l.fieldMap["type"] = l.Type
	l.fieldMap["url"] = l.Url
}

func (l lolEntry) clone(db *gorm.DB) lolEntry {
	l.lolEntryDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lolEntry) replaceDB(db *gorm.DB) lolEntry {
	l.lolEntryDo.ReplaceDB(db)
	return l
}

type lolEntryDo struct{ gen.DO }

type ILolEntryDo interface {
	gen.SubQuery
	Debug() ILolEntryDo
	WithContext(ctx context.Context) ILolEntryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILolEntryDo
	WriteDB() ILolEntryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILolEntryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILolEntryDo
	Not(conds ...gen.Condition) ILolEntryDo
	Or(conds ...gen.Condition) ILolEntryDo
	Select(conds ...field.Expr) ILolEntryDo
	Where(conds ...gen.Condition) ILolEntryDo
	Order(conds ...field.Expr) ILolEntryDo
	Distinct(cols ...field.Expr) ILolEntryDo
	Omit(cols ...field.Expr) ILolEntryDo
	Join(table schema.Tabler, on ...field.Expr) ILolEntryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILolEntryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILolEntryDo
	Group(cols ...field.Expr) ILolEntryDo
	Having(conds ...gen.Condition) ILolEntryDo
	Limit(limit int) ILolEntryDo
	Offset(offset int) ILolEntryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILolEntryDo
	Unscoped() ILolEntryDo
	Create(values ...*model.LolEntry) error
	CreateInBatches(values []*model.LolEntry, batchSize int) error
	Save(values ...*model.LolEntry) error
	First() (*model.LolEntry, error)
	Take() (*model.LolEntry, error)
	Last() (*model.LolEntry, error)
	Find() ([]*model.LolEntry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LolEntry, err error)
	FindInBatches(result *[]*model.LolEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LolEntry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILolEntryDo
	Assign(attrs ...field.AssignExpr) ILolEntryDo
	Joins(fields ...field.RelationField) ILolEntryDo
	Preload(fields ...field.RelationField) ILolEntryDo
	FirstOrInit() (*model.LolEntry, error)
	FirstOrCreate() (*model.LolEntry, error)
	FindByPage(offset int, limit int) (result []*model.LolEntry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILolEntryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithCommand(command string) (result []model.LolEntry, err error)
}

// SELECT * FROM @@table WHERE command = @command
func (l lolEntryDo) FilterWithCommand(command string) (result []model.LolEntry, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, command)
	generateSQL.WriteString("SELECT * FROM lol_entries WHERE command = ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l lolEntryDo) Debug() ILolEntryDo {
	return l.withDO(l.DO.Debug())
}

func (l lolEntryDo) WithContext(ctx context.Context) ILolEntryDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lolEntryDo) ReadDB() ILolEntryDo {
	return l.Clauses(dbresolver.Read)
}

func (l lolEntryDo) WriteDB() ILolEntryDo {
	return l.Clauses(dbresolver.Write)
}

func (l lolEntryDo) Session(config *gorm.Session) ILolEntryDo {
	return l.withDO(l.DO.Session(config))
}

func (l lolEntryDo) Clauses(conds ...clause.Expression) ILolEntryDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lolEntryDo) Returning(value interface{}, columns ...string) ILolEntryDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lolEntryDo) Not(conds ...gen.Condition) ILolEntryDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lolEntryDo) Or(conds ...gen.Condition) ILolEntryDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lolEntryDo) Select(conds ...field.Expr) ILolEntryDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lolEntryDo) Where(conds ...gen.Condition) ILolEntryDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lolEntryDo) Order(conds ...field.Expr) ILolEntryDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lolEntryDo) Distinct(cols ...field.Expr) ILolEntryDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lolEntryDo) Omit(cols ...field.Expr) ILolEntryDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lolEntryDo) Join(table schema.Tabler, on ...field.Expr) ILolEntryDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lolEntryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILolEntryDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lolEntryDo) RightJoin(table schema.Tabler, on ...field.Expr) ILolEntryDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lolEntryDo) Group(cols ...field.Expr) ILolEntryDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lolEntryDo) Having(conds ...gen.Condition) ILolEntryDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lolEntryDo) Limit(limit int) ILolEntryDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lolEntryDo) Offset(offset int) ILolEntryDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lolEntryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILolEntryDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lolEntryDo) Unscoped() ILolEntryDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lolEntryDo) Create(values ...*model.LolEntry) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lolEntryDo) CreateInBatches(values []*model.LolEntry, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lolEntryDo) Save(values ...*model.LolEntry) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lolEntryDo) First() (*model.LolEntry, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LolEntry), nil
	}
}

func (l lolEntryDo) Take() (*model.LolEntry, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LolEntry), nil
	}
}

func (l lolEntryDo) Last() (*model.LolEntry, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LolEntry), nil
	}
}

func (l lolEntryDo) Find() ([]*model.LolEntry, error) {
	result, err := l.DO.Find()
	return result.([]*model.LolEntry), err
}

func (l lolEntryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LolEntry, err error) {
	buf := make([]*model.LolEntry, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lolEntryDo) FindInBatches(result *[]*model.LolEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lolEntryDo) Attrs(attrs ...field.AssignExpr) ILolEntryDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lolEntryDo) Assign(attrs ...field.AssignExpr) ILolEntryDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lolEntryDo) Joins(fields ...field.RelationField) ILolEntryDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lolEntryDo) Preload(fields ...field.RelationField) ILolEntryDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lolEntryDo) FirstOrInit() (*model.LolEntry, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LolEntry), nil
	}
}

func (l lolEntryDo) FirstOrCreate() (*model.LolEntry, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LolEntry), nil
	}
}

func (l lolEntryDo) FindByPage(offset int, limit int) (result []*model.LolEntry, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lolEntryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lolEntryDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lolEntryDo) Delete(models ...*model.LolEntry) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lolEntryDo) withDO(do gen.Dao) *lolEntryDo {
	l.DO = *do.(*gen.DO)
	return l
}
