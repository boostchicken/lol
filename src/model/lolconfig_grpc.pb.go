// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: lolconfig.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Execute_LoL_FullMethodName         = "/boostlol.Execute/LoL"
	Execute_HistoryChan_FullMethodName = "/boostlol.Execute/HistoryChan"
)

// ExecuteClient is the client API for Execute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecuteClient interface {
	LoL(ctx context.Context, in *ExecuteLoLRequest, opts ...grpc.CallOption) (*ExecuteLoLResponse, error)
	HistoryChan(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HistoryList, error)
}

type executeClient struct {
	cc grpc.ClientConnInterface
}

func NewExecuteClient(cc grpc.ClientConnInterface) ExecuteClient {
	return &executeClient{cc}
}

func (c *executeClient) LoL(ctx context.Context, in *ExecuteLoLRequest, opts ...grpc.CallOption) (*ExecuteLoLResponse, error) {
	out := new(ExecuteLoLResponse)
	err := c.cc.Invoke(ctx, Execute_LoL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executeClient) HistoryChan(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HistoryList, error) {
	out := new(HistoryList)
	err := c.cc.Invoke(ctx, Execute_HistoryChan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecuteServer is the server API for Execute service.
// All implementations must embed UnimplementedExecuteServer
// for forward compatibility
type ExecuteServer interface {
	LoL(context.Context, *ExecuteLoLRequest) (*ExecuteLoLResponse, error)
	HistoryChan(context.Context, *emptypb.Empty) (*HistoryList, error)
	mustEmbedUnimplementedExecuteServer()
}

// UnimplementedExecuteServer must be embedded to have forward compatible implementations.
type UnimplementedExecuteServer struct {
}

func (UnimplementedExecuteServer) LoL(context.Context, *ExecuteLoLRequest) (*ExecuteLoLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoL not implemented")
}
func (UnimplementedExecuteServer) HistoryChan(context.Context, *emptypb.Empty) (*HistoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryChan not implemented")
}
func (UnimplementedExecuteServer) mustEmbedUnimplementedExecuteServer() {}

// UnsafeExecuteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecuteServer will
// result in compilation errors.
type UnsafeExecuteServer interface {
	mustEmbedUnimplementedExecuteServer()
}

func RegisterExecuteServer(s grpc.ServiceRegistrar, srv ExecuteServer) {
	s.RegisterService(&Execute_ServiceDesc, srv)
}

func _Execute_LoL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteLoLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteServer).LoL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Execute_LoL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteServer).LoL(ctx, req.(*ExecuteLoLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Execute_HistoryChan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteServer).HistoryChan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Execute_HistoryChan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteServer).HistoryChan(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Execute_ServiceDesc is the grpc.ServiceDesc for Execute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Execute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boostlol.Execute",
	HandlerType: (*ExecuteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoL",
			Handler:    _Execute_LoL_Handler,
		},
		{
			MethodName: "HistoryChan",
			Handler:    _Execute_HistoryChan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lolconfig.proto",
}

const (
	Configuration_GetLiveConfig_FullMethodName = "/boostlol.Configuration/GetLiveConfig"
)

// ConfigurationClient is the client API for Configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationClient interface {
	GetLiveConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error)
}

type configurationClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationClient(cc grpc.ClientConnInterface) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) GetLiveConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, Configuration_GetLiveConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServer is the server API for Configuration service.
// All implementations must embed UnimplementedConfigurationServer
// for forward compatibility
type ConfigurationServer interface {
	GetLiveConfig(context.Context, *emptypb.Empty) (*Config, error)
	mustEmbedUnimplementedConfigurationServer()
}

// UnimplementedConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedConfigurationServer struct {
}

func (UnimplementedConfigurationServer) GetLiveConfig(context.Context, *emptypb.Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveConfig not implemented")
}
func (UnimplementedConfigurationServer) mustEmbedUnimplementedConfigurationServer() {}

// UnsafeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServer will
// result in compilation errors.
type UnsafeConfigurationServer interface {
	mustEmbedUnimplementedConfigurationServer()
}

func RegisterConfigurationServer(s grpc.ServiceRegistrar, srv ConfigurationServer) {
	s.RegisterService(&Configuration_ServiceDesc, srv)
}

func _Configuration_GetLiveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).GetLiveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configuration_GetLiveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).GetLiveConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Configuration_ServiceDesc is the grpc.ServiceDesc for Configuration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configuration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boostlol.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiveConfig",
			Handler:    _Configuration_GetLiveConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lolconfig.proto",
}

const (
	Commands_AddCommand_FullMethodName    = "/boostlol.Commands/AddCommand"
	Commands_DeleteCommand_FullMethodName = "/boostlol.Commands/DeleteCommand"
	Commands_GetCommands_FullMethodName   = "/boostlol.Commands/GetCommands"
)

// CommandsClient is the client API for Commands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandsClient interface {
	AddCommand(ctx context.Context, in *AddCommandRequest, opts ...grpc.CallOption) (*AddCommandResponse, error)
	DeleteCommand(ctx context.Context, in *DeleteCommandRequest, opts ...grpc.CallOption) (*DeleteCommandResponse, error)
	GetCommands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCommandsResponse, error)
}

type commandsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandsClient(cc grpc.ClientConnInterface) CommandsClient {
	return &commandsClient{cc}
}

func (c *commandsClient) AddCommand(ctx context.Context, in *AddCommandRequest, opts ...grpc.CallOption) (*AddCommandResponse, error) {
	out := new(AddCommandResponse)
	err := c.cc.Invoke(ctx, Commands_AddCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandsClient) DeleteCommand(ctx context.Context, in *DeleteCommandRequest, opts ...grpc.CallOption) (*DeleteCommandResponse, error) {
	out := new(DeleteCommandResponse)
	err := c.cc.Invoke(ctx, Commands_DeleteCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandsClient) GetCommands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCommandsResponse, error) {
	out := new(GetCommandsResponse)
	err := c.cc.Invoke(ctx, Commands_GetCommands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandsServer is the server API for Commands service.
// All implementations must embed UnimplementedCommandsServer
// for forward compatibility
type CommandsServer interface {
	AddCommand(context.Context, *AddCommandRequest) (*AddCommandResponse, error)
	DeleteCommand(context.Context, *DeleteCommandRequest) (*DeleteCommandResponse, error)
	GetCommands(context.Context, *emptypb.Empty) (*GetCommandsResponse, error)
	mustEmbedUnimplementedCommandsServer()
}

// UnimplementedCommandsServer must be embedded to have forward compatible implementations.
type UnimplementedCommandsServer struct {
}

func (UnimplementedCommandsServer) AddCommand(context.Context, *AddCommandRequest) (*AddCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommand not implemented")
}
func (UnimplementedCommandsServer) DeleteCommand(context.Context, *DeleteCommandRequest) (*DeleteCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommand not implemented")
}
func (UnimplementedCommandsServer) GetCommands(context.Context, *emptypb.Empty) (*GetCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedCommandsServer) mustEmbedUnimplementedCommandsServer() {}

// UnsafeCommandsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandsServer will
// result in compilation errors.
type UnsafeCommandsServer interface {
	mustEmbedUnimplementedCommandsServer()
}

func RegisterCommandsServer(s grpc.ServiceRegistrar, srv CommandsServer) {
	s.RegisterService(&Commands_ServiceDesc, srv)
}

func _Commands_AddCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).AddCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commands_AddCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).AddCommand(ctx, req.(*AddCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commands_DeleteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).DeleteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commands_DeleteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).DeleteCommand(ctx, req.(*DeleteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commands_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commands_GetCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServer).GetCommands(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Commands_ServiceDesc is the grpc.ServiceDesc for Commands service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commands_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "boostlol.Commands",
	HandlerType: (*CommandsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCommand",
			Handler:    _Commands_AddCommand_Handler,
		},
		{
			MethodName: "DeleteCommand",
			Handler:    _Commands_DeleteCommand_Handler,
		},
		{
			MethodName: "GetCommands",
			Handler:    _Commands_GetCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lolconfig.proto",
}
