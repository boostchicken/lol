syntax = "proto3";
option go_package = "github.com/boostchicken/lol/model";

package boostlol;

import "gorm.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";


message ExecuteLoLRequest {
    string command = 1;
}
message ExecuteLoLResponse {
   bool success = 1;
   optional string commmand = 2;
   optional string url = 3;
}

message History {
    option (gorm.opts) = {ormable: true};
     string command = 1;
     string result = 2;
}

message Config {
    option (gorm.opts) = {ormable: true};
    uint64 id = 1 [(gorm.field).tag = {type: "uint64" auto_increment: true primary_key: true}];
    string Tenant = 2  [(gorm.field).tag = {type: "string" unique:true}];
     string Bind = 3;
    LolEntry Entries = 4  [(gorm.field).has_many ={}];
}

enum CommandType {
    Alias = 0;
    Redirect = 1;
    RedirectVarargs = 2;
}

message LolEntry {
    option (gorm.opts) = {ormable: true, table: "lol_commands"};
     uint64 ConfigId = 1 [(gorm.field).tag = {type: "uint64"}];
     Config config = 2 [(gorm.field).belongs_to = {foreignkey: "ConfigId"}];
     string command = 3;
     CommandType type = 4;
     string url = 5;
    
}

message AddCommandRequest {
     string command = 1;
     CommandType CommandType = 2;
     string url = 33;
}
message AddCommandResponse {
     bool success = 1;
    optional string command = 2;
    optional string url = 3;
}

message DeleteCommandRequest {
     string command = 1;
}
message DeleteCommandResponse {
     bool success = 1;
    optional string command = 2;
}

message GetCommandsResponse {
     LolEntry entries = 1;
}

message HistoryList {
     History history = 1;
}

enum AuthWebhookAction {
    authMethods = 0;
    passwordVerify = 1;
} 

message AuthWebhookRequest {
    optional string id = 1;
    string projectID = 2;
    AuthWebhookAction action = 3;
    map<string, string> data = 4;
}

message AuthWebhookResponse {
     string id = 1;
    map<string, string> data = 2;
}

service Execute {
    rpc LoL (ExecuteLoLRequest) returns (ExecuteLoLResponse) {
        option (google.api.http) = {
            get: "/v1/lol?q={command}"
        };
    }
    rpc HistoryChan(google.protobuf.Empty) returns (HistoryList) {
        option (google.api.http)= {
            get: "/v1/history"
        };
    }
}

service Configuration {
    rpc GetLiveConfig(google.protobuf.Empty) returns (Config) {
        option (google.api.http) = {
            get: "/v1/getliveconfig"
        };
    }
}

service Auth {
    rpc AuthWebhook (AuthWebhookRequest) returns (AuthWebhookResponse) {
        option (google.api.http) = {
            post: "/v1/auth/webhook"

        };
    
    }
}

service Commands {
    rpc AddCommand (AddCommandRequest) returns (AddCommandResponse) {
        option (google.api.http) = {
            put: "/v1/add/{:type?url={url}"
        };
    }
    rpc DeleteCommand (DeleteCommandRequest) returns (DeleteCommandResponse) {
        option (google.api.http) = {
            delete: "/v1/{command}"
        };
    }
    rpc GetCommands (google.protobuf.Empty) returns (GetCommandsResponse) {
        option (google.api.http) = {
            get: "/v1/commands"
        };
    }
}