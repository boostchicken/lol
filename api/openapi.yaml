openapi: '3.1.0'
security: []
info:
    version: 5.0.0
    title: BoostLOL
    description: A bunnyLoL clone that is feature rich and light weight.
    contact:
      name: "John D."
      url: "https://www.boostchicken.dev"
      email: john@boostchicken.dev
    license:
      name: MIT License
      url: https://opensource.org/license/mit/
servers:
  - url: https://lol.boostchicken.io
    description: Main Server
  - url: '{scheme}://{hostname}:{port}'
    description: Custom Server
    variables:
      hostname:
        # note! no enum here means it is an open value
        default: lol.yourdomain.io
      port:
        default: '443'
      scheme:
        enum:
          - 'http'
          - 'https'
        default: 'https'
components:
  schemas:
    config:
      description: Format of our configuration file used in many APIs
      type: object
      title: LOLConfig
      required:
        - "Bind"
        - "Entries"
      properties:
        Bind:
          description: The host and port to bind too (eg 0.0.0.0:8080)
          type: string
        Entries:
          title: CommandList
          description: "Array of all current commands"
          required:
            - "Command"
            - "Value"
            - "Type"
          type: array
          items:
            title: CommandSpec
            properties:
              Command:
                type: string
                description: The command to associate to this url
              Value:
                type: string
                description: A string following golang printf format for the URL to goto
              Type:
                type: string
                default: 'Alias'
                enum:
                - Alias
                - Redirect
                - RedirectVarArgs
                description: Execution mode for the command.  Must be one of "Alias", "Redirect", "RedirectVarArgs"
    history:
      description: List of last 250 commands
      type: array
      title: HistoryList
      items:
        title: HistoryEntry
        type: object
        properties:
          Command:
            type: string
          Result:
            type: string
            format: url 
paths:
  /history:
    get:
      description: |- 
        Your history
      summary: Get all history tab entries (max 250)
      operationId: getHistory
      tags:
        - "history"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/history"
        '404':
            description: "Impossible this URL is forever"   
  /liveconfig:
    get:
      summary: 'Get current configuration in JSON for UI'
      description: "Returns a JSON formatted server config"
      operationId: getLiveConfig
      tags:
        - "configuration"
      responses:
        '200':
          description: Config rendered
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/config"
        '404':
          description: "command not found"
          content:
            text/html:
              schema: 
                type: string
  /delete/{command}:
    delete:
      summary: Delete a command from the config
      parameters:
        - name: command
          required: true
          allowEmptyValue: false
          in: path
          schema:
            type: string
      operationId: "deleteCommand"
      tags:
        - "configuration"
      responses:
        '200':
          description: "command deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/config"
        '404':
          description: "command not found"
          content:
            text/html:
              example: "not found"
  /add/{command}/{type}:
    put:
      summary: Add a command to the config
      description: >
        Add a command to the config and reloads the cache. All strings will be trimmed, please URLEncode your url parameter.
      parameters:
        - name: command
          required: true
          in: path
          allowEmptyValue: false
          schema:
            type: string
        - name: type
          allowEmptyValue: false
          required: true
          in: path
          schema:
            type: string
            default: Alias
            enum:
              - Alias
              - Redirect
              - RedirectVarArgs
        - name: url
          in: query
          required: true
          allowEmptyValue: false
          schema:
            type: string
      operationId: addCommand
      tags:
        - "configuration"
      responses:
        '401':
          description: Strop trying to break me
        '200':
          description: "Command Added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/config" 
  /lol:
    get:
      summary: Redirect user based on the command provided
      description: > 
       The main entry point of LOL, this is where everything happens
      parameters:
        - name: q
          description: URLEscaped LOL query (eg github boostchicken lol)
          in: query
          allowEmptyValue: false
          required: true
          schema:
            type: string
      operationId: executeLol
      tags:
        - "execute"
      responses:
        '401':
          description: Strop trying to break me
        '200':
          description: You confused boostLol
        '501':
          description: "Unable to find command"
        '302':
          description: "Redirect to your the parsed URL"
          headers: 
            Location:
              schema: 
                type: string

  /lol/{command}:
    get:
      summary: Redirect user based on the command provided. Command provided as a 2nd URL segment
      description: > 
       The main entry point of LOL, this is where everything happens with URL paths instead of query strings.  This allows the users more flexibility as query strings are notoriously painful
      parameters:
        - name: command
          description: URLEscaped LOL query (eg github boostchicken lol)
          in: path
          required: true
          allowEmptyValue: false
          schema:
            type: string
      operationId: executeLolByPath
      tags:
        - "execute"
      responses:
        '401':
          description: Strop trying to break me
        '200':
          description: You confused boostLol
        '501':
          description: "Unable to find command"
          content: 
            application/json:
              schema: 
                type: object
        '302':
          description: "Redirect to your the parsed URL"
          headers: 
            Location:
              schema: 
                
                type: string

